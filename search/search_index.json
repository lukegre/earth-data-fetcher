{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Earth Data Fetcher \u00b6 A Python package designed to simplify the process of fetching gridded Earth science data from various sources using appropriate protocols. Features \u00b6 Support for multiple data access protocols: File-based data: HTTP/HTTPS/S3 THREDDS datasets CMEMS datasets (zarr) zarr is currently not supported, only indirectly via CMEMS. Configurable data source definitions via YAML Quick Start \u00b6 pip install earth-data-fetcher Create a data_sources.yaml configuration file: sst_cci : metadata : title : 'ESA Sea Surface Temperature' version : v2.1 storage_options : cache_storage : ../data/sst/{t:%Y}/ url : https://example.com/sst/data_{t:%Y%m%d}.nc Download the data: import pandas as pd import earth_data_fetcher as edf sources = edf . read_data_sources_yaml ( '../data_sources.yaml' ) sst = edf . make_downloader ( sources . sst_cci_cdr ) dates = pd . date_range ( '2010-01-01' , '2010-01-31' ) flist = sst . download ( dates )","title":"Home"},{"location":"#earth-data-fetcher","text":"A Python package designed to simplify the process of fetching gridded Earth science data from various sources using appropriate protocols.","title":"Earth Data Fetcher"},{"location":"#features","text":"Support for multiple data access protocols: File-based data: HTTP/HTTPS/S3 THREDDS datasets CMEMS datasets (zarr) zarr is currently not supported, only indirectly via CMEMS. Configurable data source definitions via YAML","title":"Features"},{"location":"#quick-start","text":"pip install earth-data-fetcher Create a data_sources.yaml configuration file: sst_cci : metadata : title : 'ESA Sea Surface Temperature' version : v2.1 storage_options : cache_storage : ../data/sst/{t:%Y}/ url : https://example.com/sst/data_{t:%Y%m%d}.nc Download the data: import pandas as pd import earth_data_fetcher as edf sources = edf . read_data_sources_yaml ( '../data_sources.yaml' ) sst = edf . make_downloader ( sources . sst_cci_cdr ) dates = pd . date_range ( '2010-01-01' , '2010-01-31' ) flist = sst . download ( dates )","title":"Quick Start"},{"location":"contributing/","text":"Contributing \u00b6 We welcome contributions to Earth Data Fetcher! Here's how you can help. Development Setup \u00b6 Clone the repository: git clone https://github.com/lukegre/earth-data-fetcher.git cd earth-data-fetcher Create a virtual environment and install dependencies: python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate pip install -e \".[dev]\" Running Tests \u00b6 pytest tests/ Documentation \u00b6 The documentation is built using MkDocs. To preview the documentation locally: mkdocs serve Then visit http://127.0.0.1:8000 in your browser. Pull Request Process \u00b6 Fork the repository Create a feature branch Make your changes Add tests if applicable Update documentation if needed Submit a pull request Code Style \u00b6 We follow PEP 8 guidelines. Please ensure your code is formatted accordingly: black src/ isort src/","title":"Contributing"},{"location":"contributing/#contributing","text":"We welcome contributions to Earth Data Fetcher! Here's how you can help.","title":"Contributing"},{"location":"contributing/#development-setup","text":"Clone the repository: git clone https://github.com/lukegre/earth-data-fetcher.git cd earth-data-fetcher Create a virtual environment and install dependencies: python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate pip install -e \".[dev]\"","title":"Development Setup"},{"location":"contributing/#running-tests","text":"pytest tests/","title":"Running Tests"},{"location":"contributing/#documentation","text":"The documentation is built using MkDocs. To preview the documentation locally: mkdocs serve Then visit http://127.0.0.1:8000 in your browser.","title":"Documentation"},{"location":"contributing/#pull-request-process","text":"Fork the repository Create a feature branch Make your changes Add tests if applicable Update documentation if needed Submit a pull request","title":"Pull Request Process"},{"location":"contributing/#code-style","text":"We follow PEP 8 guidelines. Please ensure your code is formatted accordingly: black src/ isort src/","title":"Code Style"},{"location":"api/download_https/","text":"earth_data_fetcher.download_https.DownloaderFsspec \u00b6 A class for downloading data from a URL using fsspec. Attributes: url ( str ) \u2013 The URL for downloading data. _kwargs ( dict ) \u2013 Additional keyword arguments. _fs ( AbstractFileSystem ) \u2013 The file system for the URL. _url ( str ) \u2013 The formatted URL. __init__ ( url , ** kwargs ) \u00b6 Initialize the DownloaderFsspec class. Parameters: url ( str ) \u2013 The URL for downloading data. **kwargs \u2013 Additional keyword arguments. Raises: AssertionError \u2013 If the URL does not meet the validation criteria. download ( times ) \u00b6 Download files based on the provided times. Parameters: times ( Union [ str , Timestamp , List [ Timestamp ]] ) \u2013 The times for which to download files. Returns: List [ str ] \u2013 A list of downloaded files.","title":"DownloaderFsspec"},{"location":"api/download_https/#earth_data_fetcher.download_https.DownloaderFsspec","text":"A class for downloading data from a URL using fsspec. Attributes: url ( str ) \u2013 The URL for downloading data. _kwargs ( dict ) \u2013 Additional keyword arguments. _fs ( AbstractFileSystem ) \u2013 The file system for the URL. _url ( str ) \u2013 The formatted URL.","title":"DownloaderFsspec"},{"location":"api/download_https/#earth_data_fetcher.download_https.DownloaderFsspec.__init__","text":"Initialize the DownloaderFsspec class. Parameters: url ( str ) \u2013 The URL for downloading data. **kwargs \u2013 Additional keyword arguments. Raises: AssertionError \u2013 If the URL does not meet the validation criteria.","title":"__init__"},{"location":"api/download_https/#earth_data_fetcher.download_https.DownloaderFsspec.download","text":"Download files based on the provided times. Parameters: times ( Union [ str , Timestamp , List [ Timestamp ]] ) \u2013 The times for which to download files. Returns: List [ str ] \u2013 A list of downloaded files.","title":"download"},{"location":"api/download_xarray/","text":"Dataset Download API \u00b6 earth_data_fetcher.download_xarray.DownloaderXarray \u00b6 A superclass for zarr files on S3 and GCS, as well as thread/DAP-based data Parameters: data_opener ( Callable ) \u2013 A function that takes a string (the url to the data) and returns an xarray.Dataset **kwargs \u2013 Additional keyword arguments to pass to the data opener Attributes: data_opener ( Callable ) \u2013 The function that opens the data _kwargs ( dict ) \u2013 The additional keyword arguments to pass to the data opener _data ( Dataset or None ) \u2013 The data that has been downloaded, or None if no data has been downloaded __init__ ( data_opener , ** kwargs ) \u00b6 Parameters: data_opener ( Callable ) \u2013 A function that takes a string (the url to the data) and returns an xarray.Dataset **kwargs \u2013 Additional keyword arguments to pass to the data opener download ( times ) \u00b6 Download data for the specified times. Parameters: times ( Union [ str , Timestamp , DatetimeIndex , List [ Timestamp ]] ) \u2013 The time(s) for which to download data. This can be a single timestamp as a string, a pandas Timestamp object, a list or tuple of Timestamps, or a pandas DatetimeIndex. Returns: List [ str ] \u2013 A list of file paths where the downloaded data is saved. Raises: ValueError \u2013 If the provided times are not in a valid format.","title":"DownloaderXarray"},{"location":"api/download_xarray/#dataset-download-api","text":"","title":"Dataset Download API"},{"location":"api/download_xarray/#earth_data_fetcher.download_xarray.DownloaderXarray","text":"A superclass for zarr files on S3 and GCS, as well as thread/DAP-based data Parameters: data_opener ( Callable ) \u2013 A function that takes a string (the url to the data) and returns an xarray.Dataset **kwargs \u2013 Additional keyword arguments to pass to the data opener Attributes: data_opener ( Callable ) \u2013 The function that opens the data _kwargs ( dict ) \u2013 The additional keyword arguments to pass to the data opener _data ( Dataset or None ) \u2013 The data that has been downloaded, or None if no data has been downloaded","title":"DownloaderXarray"},{"location":"api/download_xarray/#earth_data_fetcher.download_xarray.DownloaderXarray.__init__","text":"Parameters: data_opener ( Callable ) \u2013 A function that takes a string (the url to the data) and returns an xarray.Dataset **kwargs \u2013 Additional keyword arguments to pass to the data opener","title":"__init__"},{"location":"api/download_xarray/#earth_data_fetcher.download_xarray.DownloaderXarray.download","text":"Download data for the specified times. Parameters: times ( Union [ str , Timestamp , DatetimeIndex , List [ Timestamp ]] ) \u2013 The time(s) for which to download data. This can be a single timestamp as a string, a pandas Timestamp object, a list or tuple of Timestamps, or a pandas DatetimeIndex. Returns: List [ str ] \u2013 A list of file paths where the downloaded data is saved. Raises: ValueError \u2013 If the provided times are not in a valid format.","title":"download"},{"location":"user-guide/data-sources/","text":"Defining Data Sources \u00b6 Earth Data Fetcher supports various gridded data sources and protocols. Data are saved as netCDF files The following data sources are currently supported: HTTP/HTTPS/FTP/S3 THREDDS datasets CMEMS datasets Basic configuration \u00b6 Each data source is defined as a top-level entry in the YAML file: dataset_name : metadata : title : 'Dataset Title' version : 'v1.0' storage_options : cache_storage : path/to/storage/{t:%Y}/ same_names : true url : https://example.com/data_{t:%Y%m%d}.nc variables : variable_name : output_name Accepted Fields \u00b6 Bold values are required, italic are required for some sources. url : The URL template for accessing the data storage_options : Configuration for local storage that is passed to fsspec - can add more options if login is required cache_storage : Path template for storing downloaded files. For fsspec -based storage, only the directory is required. For xarray -based storage, the full path is required. Supports using string formatting with time denoted by {t:%Y%m%d} where %Y is the year, %m is the month, and %d is the day. Any top-level and metadata arguments will be passed to the string formatting. variables : required for THREDDS and CMEMS datasets. the variable_name: output_name . The variables are currently not renamed, but allows for renaming further down the pipeline. time : Configuration for the time range of the dataset - required for file-based sources (FTP, HTTP, HTTPS, S3) start : Start date of the dataset (YYYY-MM-DD) end : End date of the dataset (YYYY-MM-DD) freq : Frequency of the dataset, with support for n[DMY] , where n is an integer, D is day, M is month, and Y is year. e.g., 8D = 8-day metadata : Metadata about the dataset title : Title of the dataset version : Version of the dataset doi : DOI of the dataset - highly recommended Configurations for supported protocols \u00b6 The sections below show the configuration for supported protocols including the conditional required fields. HTTP/HTTPS/FTP/S3 \u00b6 For file-based sources, fsspec is used to download the data. Ensure that you pass the appropriate fsspec options in the storage_options field. I've given an example for an FTP source below but the same principle would apply for S3 for example. At the moment, sessions + cookies are not supported. fsspec_data_source_key : # url must have the following: start with 'filecache::', url : filecache::ftp://example.com/variable/product/remote_fname_{t:%Y%m%d}.nc # fsspec is used to download files, so any fsspec options can be passed storage_options : # items given at the main level are used for 'filecache', # while subsequent protocols have to be specified (see 'ftp' below) cache_storage : ../data/sst/{t:%Y}/ # only the folder should be given same_names : true # in this case 'remote_fname_{t:%Y%m%d}.nc' ftp : # an example of ftp options username : myusername password : mypassword metadata : # optional title : 'Copy this from the website' version : 'v1.0' doi : https://doi.org/10.... # much easier later time : # to specify the time range of the data start : 1980-01-01 end : 2024-01-01 freq : 1D # the frequency of the data ('8D' = 8-day, etc.) THREDDS datasets \u00b6 For both thredds and CMEMS datasets, the same approach is used. The data is loaded using xarray, and the nearest time step to the requested time is selected. This means that if the requested time is not available, the nearest available time step is selected (e.g., 1990-01-01 requested, but only 1997-09-01 is available). For THREDDS datasets that can be accessed through the thredds:: protocol: thredds_based_data_source_key : # in the output dictionary # the url must contain `thredds::`, to be recognized as a THREDDS dataset url : https://rsg.pml.ac.uk/thredds/dodsC/CCI_ALL-v6.0-8DAY storage_options : # we keep the same nomenclature as fsspec (a bit clunky) # for the local storage, file path AND name are required for thredds cache_storage : ../data/variable/product/{t:%Y}/filename_{t:%Y%m%d}.nc time : start : 1997-09-01 end : 2024-01-01 freq : 8D CMEMS datasets \u00b6 For CMEMS (Copernicus Marine Service) datasets: cmems_data_source_key : # will be used as the key in the output dictionary # only pass the dataset ID as copied from the CMEMS website # if not recognized as a url, then assume it's a CMEMS dataset ID url : <copernicusmarine_dataset_id> metadata : doi : https://doi.org/10.... storage_options : # to be consistent with fsspec nomenclature # for the local storage, file path AND name are required for CMEMS cache_storage : ../data/variable/product/{t:%Y}/filename_{t:%Y%m%d}.nc variables : variable_name : output_name # currently variable is not renamed","title":"Defining Data Sources"},{"location":"user-guide/data-sources/#defining-data-sources","text":"Earth Data Fetcher supports various gridded data sources and protocols. Data are saved as netCDF files The following data sources are currently supported: HTTP/HTTPS/FTP/S3 THREDDS datasets CMEMS datasets","title":"Defining Data Sources"},{"location":"user-guide/data-sources/#basic-configuration","text":"Each data source is defined as a top-level entry in the YAML file: dataset_name : metadata : title : 'Dataset Title' version : 'v1.0' storage_options : cache_storage : path/to/storage/{t:%Y}/ same_names : true url : https://example.com/data_{t:%Y%m%d}.nc variables : variable_name : output_name","title":"Basic configuration"},{"location":"user-guide/data-sources/#accepted-fields","text":"Bold values are required, italic are required for some sources. url : The URL template for accessing the data storage_options : Configuration for local storage that is passed to fsspec - can add more options if login is required cache_storage : Path template for storing downloaded files. For fsspec -based storage, only the directory is required. For xarray -based storage, the full path is required. Supports using string formatting with time denoted by {t:%Y%m%d} where %Y is the year, %m is the month, and %d is the day. Any top-level and metadata arguments will be passed to the string formatting. variables : required for THREDDS and CMEMS datasets. the variable_name: output_name . The variables are currently not renamed, but allows for renaming further down the pipeline. time : Configuration for the time range of the dataset - required for file-based sources (FTP, HTTP, HTTPS, S3) start : Start date of the dataset (YYYY-MM-DD) end : End date of the dataset (YYYY-MM-DD) freq : Frequency of the dataset, with support for n[DMY] , where n is an integer, D is day, M is month, and Y is year. e.g., 8D = 8-day metadata : Metadata about the dataset title : Title of the dataset version : Version of the dataset doi : DOI of the dataset - highly recommended","title":"Accepted Fields"},{"location":"user-guide/data-sources/#configurations-for-supported-protocols","text":"The sections below show the configuration for supported protocols including the conditional required fields.","title":"Configurations for supported protocols"},{"location":"user-guide/data-sources/#httphttpsftps3","text":"For file-based sources, fsspec is used to download the data. Ensure that you pass the appropriate fsspec options in the storage_options field. I've given an example for an FTP source below but the same principle would apply for S3 for example. At the moment, sessions + cookies are not supported. fsspec_data_source_key : # url must have the following: start with 'filecache::', url : filecache::ftp://example.com/variable/product/remote_fname_{t:%Y%m%d}.nc # fsspec is used to download files, so any fsspec options can be passed storage_options : # items given at the main level are used for 'filecache', # while subsequent protocols have to be specified (see 'ftp' below) cache_storage : ../data/sst/{t:%Y}/ # only the folder should be given same_names : true # in this case 'remote_fname_{t:%Y%m%d}.nc' ftp : # an example of ftp options username : myusername password : mypassword metadata : # optional title : 'Copy this from the website' version : 'v1.0' doi : https://doi.org/10.... # much easier later time : # to specify the time range of the data start : 1980-01-01 end : 2024-01-01 freq : 1D # the frequency of the data ('8D' = 8-day, etc.)","title":"HTTP/HTTPS/FTP/S3"},{"location":"user-guide/data-sources/#thredds-datasets","text":"For both thredds and CMEMS datasets, the same approach is used. The data is loaded using xarray, and the nearest time step to the requested time is selected. This means that if the requested time is not available, the nearest available time step is selected (e.g., 1990-01-01 requested, but only 1997-09-01 is available). For THREDDS datasets that can be accessed through the thredds:: protocol: thredds_based_data_source_key : # in the output dictionary # the url must contain `thredds::`, to be recognized as a THREDDS dataset url : https://rsg.pml.ac.uk/thredds/dodsC/CCI_ALL-v6.0-8DAY storage_options : # we keep the same nomenclature as fsspec (a bit clunky) # for the local storage, file path AND name are required for thredds cache_storage : ../data/variable/product/{t:%Y}/filename_{t:%Y%m%d}.nc time : start : 1997-09-01 end : 2024-01-01 freq : 8D","title":"THREDDS datasets"},{"location":"user-guide/data-sources/#cmems-datasets","text":"For CMEMS (Copernicus Marine Service) datasets: cmems_data_source_key : # will be used as the key in the output dictionary # only pass the dataset ID as copied from the CMEMS website # if not recognized as a url, then assume it's a CMEMS dataset ID url : <copernicusmarine_dataset_id> metadata : doi : https://doi.org/10.... storage_options : # to be consistent with fsspec nomenclature # for the local storage, file path AND name are required for CMEMS cache_storage : ../data/variable/product/{t:%Y}/filename_{t:%Y%m%d}.nc variables : variable_name : output_name # currently variable is not renamed","title":"CMEMS datasets"},{"location":"user-guide/oceansoda-sources/","text":"Example Data Sources \u00b6 These are data sources that I use for the OceanSODA-ETHZv2 product chl_cci : metadata : title : 'ESA Ocean Colour Climate Change Initiative (OC-CCI): Level 4 Analysis product, version 6.0' version : v6.0 storage_options : cache_storage : ../data/chl_esa_cci/chl/v6.0/{t:%Y}/ESACCI-OC-L3S-CHLOR_A-MERGED-8D_DAILY_4km_GEO_PML_OCx-{t:%Y%m%d}-fv6.0.nc url : https://rsg.pml.ac.uk/thredds/dodsC/CCI_ALL-v6.0-8DAY variables : chlor_a : chl_cci chlor_a_log10_bias : chl_cci_log10_bias chlor_a_log10_rmsd : chl_cci_log10_rmsd soda : metadata : info : https://soda.umd.edu/ spatial_resolution : 0.5 degrees temporal_resolution : 5 days title : Simple Ocean Data Assimilation (SODA) v3.15.2 version : v3.15.2 storage_options : cache_storage : ../data/soda/v3.15.2/{t:%Y}/ same_names : true time : end : 2020-12-31 freq : 5D start : 1980-01-03 start_doy : none url : filecache::http://dsrs.atmos.umd.edu/DATA/soda3.15.2/REGRIDED/ocean/soda3.15.2_5dy_ocean_reg_{t:%Y_%m_%d}.nc ssh_duacs_cmems : metadata : doi : https://doi.org/10.25423/CMEMS-SEALEVEL-GLO-001 spatial_resolution : 0.125 degrees temporal_resolution : 1 day title : CMEMS Sea Level Anomaly (SLA) product version : 2020 storage_options : cache_storage : ../data/ssh_duacs/{t:%Y}/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.125deg_P1D_{t:%Y%m%d}.nc same_names : true time : end : 2024-06-30 freq : 1D start : 1993-01-01 url : cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.125deg_P1D variables : adt : ssh_adt sla : ssh_sla sst_cci_cdr : metadata : doi : https://dx.doi.org/10.5285/4a9654136a7148e39b7feb56f8bb02d2 processing_level : 4 spatial_resolution : 0.05 degrees temporal_resolution : 1 day title : 'ESA Sea Surface Temperature Climate Change Initiative (SST_cci): Level 4 Analysis product, version 3.0' version : v3.0.1 storage_options : cache_storage : ../data/sst_esa_cci/v3.0.1/{t:%Y}/ same_names : true time : end : 2024-06-30 freq : 1D start : 1982-01-01 url : filecache::https://dap.ceda.ac.uk/neodc/eocis/data/global_and_regional/sea_surface_temperature/CDR_v3/Analysis/L4/v3.0.1/{t:%Y}/{t:%m}/{t:%d}/*L4_GHRSST-SSTdepth-OSTIA*.nc variables : analysed_sst : sst_cci analysed_sst_uncertainty : sst_cci_uncertainty sea_ice_fraction : ice_cci sst_oisst : metadata : citation : null doi : https://doi.org/10.25921/RE9P-PT57 spatial_resolution : 0.25 degrees temporal_resolution : 1 day title : NOAA Optimum Interpolation Sea Surface Temperature (OISST) v2.1 version : v2.1 storage_options : cache_storage : ../data/sst_noaa_oisst/v2.1/{t:%Y}/ same_names : true time : end : 2024-12-31 freq : 1D start : 2024-07-01 url : filecache::https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/{t:%Y%m}/oisst-avhrr-v02r01.{t:%Y%m%d}.nc sss_cci : url : filecache::https://dap.ceda.ac.uk/neodc/esacci/sea_surface_salinity/data/v04.41/GLOBALv4.41/7days/{t:%Y}/ESACCI-SEASURFACESALINITY-L4-SSS-GLOBAL-MERGED_OI_7DAY_RUNNINGMEAN_DAILY_0.25deg-{t:%Y%m%d}-fv4.41.nc storage_options : cache_storage : ../data/sss_esacci_smos/v04.41/{t:%Y}/ same_names : true metadata : citation_info : https://catalogue.ceda.ac.uk/uuid/0d0f4a942a144d9cab9263de3949a5d6/ spatial_resolution : 0.25 degrees temporal_resolution : daily as 7 day rolling mean title : \"ESA Sea Surface Salinity Climate Change Initiative (Sea_Surface_Salinity_cci): Weekly sea surface salinity product on a global grid, v04.41, for 2010 to 2022\" version : v4.41 time : start : 2010-01-01 end : 2022-10-30 freq : 1D chl_globcolour : url : filecache::https://s3.waw3-1.cloudferro.com/mdl-native-16/native/OCEANCOLOUR_GLO_BGC_L4_MY_009_104/cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D_202311/{t:%Y}/{t:%m}/{t:%Y%m%d}_cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D.nc storage_options : cache_storage : ../data/chl_cmems_globcolour/cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D/{t:%Y}/ same_names : true metadata : doi : https://doi.org/10.48670/moi-00281 spatial_resolution : 4 km temporal_resolution : 1 day title : Global Ocean Colour (Copernicus-GlobColour), Bio-Geo-Chemical, L4 (monthly and interpolated) from Satellite Observations time : # 1 Sep 1997 to 14 Jan 2025 start : 1997-09-01 end : 2025-01-01 freq : 1D variables : CHL : chl_globcolour CHL_uncertainty : chl_globcolour_uncert flags : chl_globcolour_flags","title":"OceanSODA-ETHZv2 sources"},{"location":"user-guide/oceansoda-sources/#example-data-sources","text":"These are data sources that I use for the OceanSODA-ETHZv2 product chl_cci : metadata : title : 'ESA Ocean Colour Climate Change Initiative (OC-CCI): Level 4 Analysis product, version 6.0' version : v6.0 storage_options : cache_storage : ../data/chl_esa_cci/chl/v6.0/{t:%Y}/ESACCI-OC-L3S-CHLOR_A-MERGED-8D_DAILY_4km_GEO_PML_OCx-{t:%Y%m%d}-fv6.0.nc url : https://rsg.pml.ac.uk/thredds/dodsC/CCI_ALL-v6.0-8DAY variables : chlor_a : chl_cci chlor_a_log10_bias : chl_cci_log10_bias chlor_a_log10_rmsd : chl_cci_log10_rmsd soda : metadata : info : https://soda.umd.edu/ spatial_resolution : 0.5 degrees temporal_resolution : 5 days title : Simple Ocean Data Assimilation (SODA) v3.15.2 version : v3.15.2 storage_options : cache_storage : ../data/soda/v3.15.2/{t:%Y}/ same_names : true time : end : 2020-12-31 freq : 5D start : 1980-01-03 start_doy : none url : filecache::http://dsrs.atmos.umd.edu/DATA/soda3.15.2/REGRIDED/ocean/soda3.15.2_5dy_ocean_reg_{t:%Y_%m_%d}.nc ssh_duacs_cmems : metadata : doi : https://doi.org/10.25423/CMEMS-SEALEVEL-GLO-001 spatial_resolution : 0.125 degrees temporal_resolution : 1 day title : CMEMS Sea Level Anomaly (SLA) product version : 2020 storage_options : cache_storage : ../data/ssh_duacs/{t:%Y}/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.125deg_P1D_{t:%Y%m%d}.nc same_names : true time : end : 2024-06-30 freq : 1D start : 1993-01-01 url : cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.125deg_P1D variables : adt : ssh_adt sla : ssh_sla sst_cci_cdr : metadata : doi : https://dx.doi.org/10.5285/4a9654136a7148e39b7feb56f8bb02d2 processing_level : 4 spatial_resolution : 0.05 degrees temporal_resolution : 1 day title : 'ESA Sea Surface Temperature Climate Change Initiative (SST_cci): Level 4 Analysis product, version 3.0' version : v3.0.1 storage_options : cache_storage : ../data/sst_esa_cci/v3.0.1/{t:%Y}/ same_names : true time : end : 2024-06-30 freq : 1D start : 1982-01-01 url : filecache::https://dap.ceda.ac.uk/neodc/eocis/data/global_and_regional/sea_surface_temperature/CDR_v3/Analysis/L4/v3.0.1/{t:%Y}/{t:%m}/{t:%d}/*L4_GHRSST-SSTdepth-OSTIA*.nc variables : analysed_sst : sst_cci analysed_sst_uncertainty : sst_cci_uncertainty sea_ice_fraction : ice_cci sst_oisst : metadata : citation : null doi : https://doi.org/10.25921/RE9P-PT57 spatial_resolution : 0.25 degrees temporal_resolution : 1 day title : NOAA Optimum Interpolation Sea Surface Temperature (OISST) v2.1 version : v2.1 storage_options : cache_storage : ../data/sst_noaa_oisst/v2.1/{t:%Y}/ same_names : true time : end : 2024-12-31 freq : 1D start : 2024-07-01 url : filecache::https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/{t:%Y%m}/oisst-avhrr-v02r01.{t:%Y%m%d}.nc sss_cci : url : filecache::https://dap.ceda.ac.uk/neodc/esacci/sea_surface_salinity/data/v04.41/GLOBALv4.41/7days/{t:%Y}/ESACCI-SEASURFACESALINITY-L4-SSS-GLOBAL-MERGED_OI_7DAY_RUNNINGMEAN_DAILY_0.25deg-{t:%Y%m%d}-fv4.41.nc storage_options : cache_storage : ../data/sss_esacci_smos/v04.41/{t:%Y}/ same_names : true metadata : citation_info : https://catalogue.ceda.ac.uk/uuid/0d0f4a942a144d9cab9263de3949a5d6/ spatial_resolution : 0.25 degrees temporal_resolution : daily as 7 day rolling mean title : \"ESA Sea Surface Salinity Climate Change Initiative (Sea_Surface_Salinity_cci): Weekly sea surface salinity product on a global grid, v04.41, for 2010 to 2022\" version : v4.41 time : start : 2010-01-01 end : 2022-10-30 freq : 1D chl_globcolour : url : filecache::https://s3.waw3-1.cloudferro.com/mdl-native-16/native/OCEANCOLOUR_GLO_BGC_L4_MY_009_104/cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D_202311/{t:%Y}/{t:%m}/{t:%Y%m%d}_cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D.nc storage_options : cache_storage : ../data/chl_cmems_globcolour/cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D/{t:%Y}/ same_names : true metadata : doi : https://doi.org/10.48670/moi-00281 spatial_resolution : 4 km temporal_resolution : 1 day title : Global Ocean Colour (Copernicus-GlobColour), Bio-Geo-Chemical, L4 (monthly and interpolated) from Satellite Observations time : # 1 Sep 1997 to 14 Jan 2025 start : 1997-09-01 end : 2025-01-01 freq : 1D variables : CHL : chl_globcolour CHL_uncertainty : chl_globcolour_uncert flags : chl_globcolour_flags","title":"Example Data Sources"}]}